(()=>{var e={119:()=>{class e extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}).innerHTML='\n      <style>\n        :host {\n          display: block;\n          font-family: Arial, sans-serif;\n          background: #fff;\n          min-height: 100vh;\n        }\n        .title {\n          font-size: 1.3em;\n          font-weight: bold;\n          margin-bottom: 10px;\n        }\n        .container {\n          margin: 10px;\n        }\n      </style>\n      <div class="container">\n        <div class="title">Интерфейс приложения:</div>\n        <polygon-controls></polygon-controls>\n        <polygon-buffer></polygon-buffer>\n        <polygon-workspace></polygon-workspace>\n      </div>\n    '}connectedCallback(){this.buffer=this.shadowRoot.querySelector("polygon-buffer"),this.workspace=this.shadowRoot.querySelector("polygon-workspace"),this.controls=this.shadowRoot.querySelector("polygon-controls"),this.controls.shadowRoot.getElementById("save").addEventListener("click",this.handleSave),this.controls.shadowRoot.getElementById("reset").addEventListener("click",this.handleReset),this.loadState()}disconnectedCallback(){this.controls.shadowRoot.getElementById("save").removeEventListener("click",this.handleSave),this.controls.shadowRoot.getElementById("reset").removeEventListener("click",this.handleReset)}handleSave=()=>{const e={buffer:this.buffer.polygons,workspace:this.workspace.polygons};localStorage.setItem("polygon-app-state",JSON.stringify(e))};handleReset=()=>{localStorage.removeItem("polygon-app-state"),this.buffer&&(this.buffer.polygons=[]),this.workspace&&(this.workspace.polygons=[]),this.buffer&&this.buffer.renderPolygons(),this.workspace&&this.workspace.renderPolygons()};loadState(){const e=localStorage.getItem("polygon-app-state");if(e)try{const t=JSON.parse(e);this.buffer&&Array.isArray(t.buffer)&&(this.buffer.polygons=t.buffer,this.buffer.renderPolygons()),this.workspace&&Array.isArray(t.workspace)&&(this.workspace.polygons=t.workspace,this.workspace.renderPolygons())}catch(e){}}}customElements.define("polygon-app",e)},995:()=>{class e extends HTMLElement{constructor(){super(),this.shadow=this.attachShadow({mode:"open"}),this.shadow.innerHTML='\n      <style>\n        .buffer {\n          background: #2d2d2d;\n          min-height: 200px;\n          margin-bottom: 8px;\n\t\t  padding: 10px;\n          display: flex;\n          flex-wrap: wrap;\n          align-items: flex-start;\n          justify-content: flex-start;\n          gap: 16px;\n          border-radius: 2px;\n        }\n      </style>\n      <div class="buffer"></div>\n    ',this.bufferDiv=this.shadow.querySelector(".buffer"),this.polygons=[]}connectedCallback(){window.addEventListener("polygon-create",this.generatePolygons),window.addEventListener("polygon-drop-to-buffer",this.handleDropToBuffer),this.renderPolygons(),this.bufferDiv.addEventListener("dragover",this.handleDragOver),this.bufferDiv.addEventListener("drop",this.handleDrop)}disconnectedCallback(){window.removeEventListener("polygon-create",this.generatePolygons),window.removeEventListener("polygon-drop-to-buffer",this.handleDropToBuffer),this.bufferDiv.removeEventListener("dragover",this.handleDragOver),this.bufferDiv.removeEventListener("drop",this.handleDrop)}generatePolygons=()=>{this.polygons=[];const e=Math.floor(16*Math.random())+5;for(let t=0;t<e;t++)this.polygons.push(this.createRandomPolygonData());this.renderPolygons()};createRandomPolygonData(){const e=Math.floor(4*Math.random())+5,t=[];for(let n=0;n<e;n++){const o=2*Math.PI*n/e+.3*Math.random(),s=50+40*Math.cos(o)*(.8+.4*Math.random()),r=50+40*Math.sin(o)*(.8+.4*Math.random());t.push([s,r])}return{id:crypto.randomUUID(),w:100,h:100,points:t,fill:"#900025"}}renderPolygons(){this.bufferDiv.innerHTML="";for(const e of this.polygons){const t=document.createElement("div");t.setAttribute("draggable","true"),t.style.display="inline-block",t.style.width=e.w+"px",t.style.height=e.h+"px",t.style.cursor="grab",t.style.background="none",t.style.border="none",t.style.padding="0",t.style.margin="0",t.style.boxShadow="none",t.style.userSelect="none";const n=document.createElementNS("http://www.w3.org/2000/svg","svg");n.setAttribute("width",e.w),n.setAttribute("height",e.h),n.setAttribute("viewBox",`0 0 ${e.w} ${e.h}`),n.style.background="none",n.innerHTML=`<polygon points="${e.points.map((e=>e.join(","))).join(" ")}" fill="${e.fill}" />`,t.appendChild(n),t.addEventListener("dragstart",(t=>this.handleDragStart(t,e.id))),t.addEventListener("dragend",this.handleDragEnd),this.bufferDiv.appendChild(t)}const e=Math.max(...this.polygons.map((e=>(e.y||0)+e.h)),200);this.bufferDiv.style.height=e+20+"px"}handleDragStart(e,t){e.dataTransfer.effectAllowed="move",e.dataTransfer.setData("application/polygon-id",t),window._draggedPolygonId=t;const n=this.polygons.find((e=>e.id===t));if(n){const t=`<svg xmlns="http://www.w3.org/2000/svg" width="${n.w}" height="${n.h}" viewBox="0 0 ${n.w} ${n.h}">\n\t\t\t\t<polygon points="${n.points.map((e=>e.join(","))).join(" ")}" fill="${n.fill}" />\n\t\t\t</svg>`,o=document.createElement("img");o.src="data:image/svg+xml;base64,"+btoa(t),o.style.opacity="1",document.body.appendChild(o),e.dataTransfer.setDragImage(o,n.w/2,n.h/2),setTimeout((()=>document.body.removeChild(o)),0)}}handleDragEnd(e){e.target.style.opacity=""}handleDropToBuffer=e=>{const{polygon:t}=e.detail;this.polygons.push(t),this.renderPolygons()};removePolygonById(e){this.polygons=this.polygons.filter((t=>t.id!==e)),this.renderPolygons()}getPolygonById(e){return this.polygons.find((t=>t.id===e))}handleDragOver=e=>{e.preventDefault(),e.dataTransfer.dropEffect="move"};handleDrop=e=>{e.preventDefault();const t=e.dataTransfer.getData("application/polygon-id");if(t){const e=document.querySelector("polygon-app");let n=null;if(e&&e.shadowRoot&&(n=e.shadowRoot.querySelector("polygon-workspace")),n){const e=n.getPolygonById(t);if(e){n.removePolygonById(t),delete e.x,delete e.y,this.polygons.push(e),this.renderPolygons();const o=new MouseEvent("mouseup",{bubbles:!0});window.dispatchEvent(o)}}}}}customElements.define("polygon-buffer",e)},210:()=>{class e extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}).innerHTML='\n      <style>\n        .controls {\n          display: flex;\n          justify-content: space-between;\n          background: #444;\n          padding: 12px 24px;\n          border-radius: 4px;\n          margin-bottom: 12px;\n        }\n        button {\n          background: #aaa;\n          border: none;\n          border-radius: 4px;\n          padding: 8px 24px;\n          font-size: 1em;\n          cursor: pointer;\n          margin-left: 8px;\n        }\n        button:active {\n          background: #888;\n        }\n      </style>\n      <div class="controls">\n        <div>\n          <button id="create">Создать</button>\n        </div>\n        <div>\n          <button id="save">Сохранить</button>\n          <button id="reset">Сбросить</button>\n        </div>\n      </div>\n    '}connectedCallback(){this.shadowRoot.getElementById("create").addEventListener("click",this.handleCreate)}disconnectedCallback(){this.shadowRoot.getElementById("create").removeEventListener("click",this.handleCreate)}handleCreate=()=>{window.dispatchEvent(new CustomEvent("polygon-create"))}}customElements.define("polygon-controls",e)},941:()=>{class e extends HTMLElement{constructor(){super();const e=this.attachShadow({mode:"open"});e.innerHTML='\n      <style>\n        .workspace {\n          background: #2d2d2d;\n          min-height: 300px;\n          border-radius: 2px;\n          position: relative;\n          overflow: hidden;\n          width: 100%;\n          height: 400px;\n        }\n        .scale-svg {\n          position: absolute;\n          left: 0;\n          top: 0;\n          width: 100%;\n          height: 100%;\n          pointer-events: none;\n          z-index: 1;\n        }\n        .polygons-layer {\n          position: absolute;\n          left: 0;\n          top: 0;\n          width: 100%;\n          height: 100%;\n          z-index: 2;\n        }\n        svg, polygon {\n          pointer-events: all;\n          user-drag: none;\n          -webkit-user-drag: none;\n        }\n        .draggable-polygon:active, .draggable-polygon:focus {\n          outline: none !important;\n          box-shadow: none !important;\n          filter: none !important;\n        }\n      </style>\n      <div class="workspace">\n        <svg class="scale-svg"></svg>\n        <div class="polygons-layer"></div>\n      </div>\n    ',this.workspaceDiv=e.querySelector(".workspace"),this.scaleSvg=e.querySelector(".scale-svg"),this.polygonsLayer=e.querySelector(".polygons-layer"),this.polygons=[],this.scale=1,this.offsetX=0,this.offsetY=0,this.isPanning=!1,this.panStart={x:0,y:0}}connectedCallback(){this.workspaceDiv.addEventListener("dragover",this.handleDragOver),this.workspaceDiv.addEventListener("drop",this.handleDrop),window.addEventListener("polygon-drop-to-workspace",this.handleDropToWorkspace),this.workspaceDiv.addEventListener("wheel",this.handleWheel,{passive:!1}),this.workspaceDiv.addEventListener("mousedown",this.handleMouseDown),window.addEventListener("mousemove",this.handleMouseMove),window.addEventListener("mouseup",this.handleMouseUp),this.renderAll()}disconnectedCallback(){this.workspaceDiv.removeEventListener("dragover",this.handleDragOver),this.workspaceDiv.removeEventListener("drop",this.handleDrop),window.removeEventListener("polygon-drop-to-workspace",this.handleDropToWorkspace),this.workspaceDiv.removeEventListener("wheel",this.handleWheel),this.workspaceDiv.removeEventListener("mousedown",this.handleMouseDown),window.removeEventListener("mousemove",this.handleMouseMove),window.removeEventListener("mouseup",this.handleMouseUp)}renderAll(){this.renderScale(),this.renderPolygons()}renderScale(){const e=this.workspaceDiv.clientWidth,t=this.workspaceDiv.clientHeight,n=this.scale,o=this.offsetX,s=this.offsetY,r=50*n;let i="<g>";for(let s=o%r;s<e;s+=r)i+=`<line x1="${s}" y1="0" x2="${s}" y2="${t}" stroke="#888" stroke-width="1" />`,s>0&&(i+=`<text x="${s+2}" y="12" font-size="10" fill="#aaa">${Math.round((s-o)/n)}</text>`);for(let o=s%r;o<t;o+=r)i+=`<line x1="0" y1="${o}" x2="${e}" y2="${o}" stroke="#888" stroke-width="1" />`,o>0&&(i+=`<text x="2" y="${o-2}" font-size="10" fill="#aaa">${Math.round((o-s)/n)}</text>`);i+="</g>",this.scaleSvg.setAttribute("width",e),this.scaleSvg.setAttribute("height",t),this.scaleSvg.innerHTML=i}renderPolygons(){this.polygonsLayer.innerHTML="";for(const e of this.polygons){const t=document.createElement("div");t.className="draggable-polygon",t.setAttribute("draggable","true"),t.setAttribute("data-id",e.id),t.style.position="absolute";const n=(e.x||0)*this.scale+this.offsetX,o=(e.y||0)*this.scale+this.offsetY;t.style.left=n+"px",t.style.top=o+"px",t.style.width=e.w*this.scale+"px",t.style.height=e.h*this.scale+"px",t.style.cursor="grab",t.style.background="none",t.style.border="none",t.style.padding="0",t.style.margin="0",t.style.boxShadow="none",t.style.userSelect="none";const s=document.createElementNS("http://www.w3.org/2000/svg","svg");s.setAttribute("width",e.w*this.scale),s.setAttribute("height",e.h*this.scale),s.setAttribute("viewBox",`0 0 ${e.w} ${e.h}`),s.style.background="none";const r=document.createElementNS("http://www.w3.org/2000/svg","polygon");r.setAttribute("points",e.points.map((e=>e.join(","))).join(" ")),r.setAttribute("fill",e.fill),s.appendChild(r),t.appendChild(s),t.addEventListener("dragstart",(t=>this.handleDragStart(t,e.id))),t.addEventListener("dragend",this.handleDragEnd),this.polygonsLayer.appendChild(t)}}handleDragOver=e=>{e.preventDefault(),e.dataTransfer.dropEffect="move"};handleDrop=e=>{console.log("drop event"),e.preventDefault();const t=e.dataTransfer.getData("application/polygon-id");if(t){const n=document.querySelector("polygon-app");let o=null;if(n&&n.shadowRoot&&(o=n.shadowRoot.querySelector("polygon-buffer")),o){const n=o.getPolygonById(t);if(n){const s=this.workspaceDiv.getBoundingClientRect(),r=e.clientX-s.left-n.w/2,i=e.clientY-s.top-n.h/2;n.x=Math.max(0,Math.min(r,s.width-n.w)),n.y=Math.max(0,Math.min(i,s.height-n.h)),this.polygons.push(n),this.renderPolygons(),o.removePolygonById(t)}}}};handleDragStart(e,t){console.log("dragstart workspace",t),e.dataTransfer.effectAllowed="move",e.dataTransfer.setData("application/polygon-id",t)}handleDragEnd(e){console.log("dragend workspace"),this.isPanning=!1}handleDropToWorkspace=e=>{const{polygon:t}=e.detail;this.polygons.push(t),this.renderPolygons()};removePolygonById(e){this.polygons=this.polygons.filter((t=>t.id!==e)),this.renderPolygons()}getPolygonById(e){return this.polygons.find((t=>t.id===e))}handleWheel=e=>{e.preventDefault();const t=this.scale,n=e.deltaY<0?1.1:.9,o=e.offsetX,s=e.offsetY;this.scale*=n,this.scale=Math.max(.2,Math.min(this.scale,5)),this.offsetX=o-(o-this.offsetX)*(this.scale/t),this.offsetY=s-(s-this.offsetY)*(this.scale/t),this.renderAll()};handleMouseDown=e=>{0===e.button&&(this.isPanning=!0,this.panStart={x:e.clientX,y:e.clientY,ox:this.offsetX,oy:this.offsetY})};handleMouseMove=e=>{if(!this.isPanning)return;const t=e.clientX-this.panStart.x,n=e.clientY-this.panStart.y;this.offsetX=this.panStart.ox+t,this.offsetY=this.panStart.oy+n,this.renderAll()};handleMouseUp=e=>{this.isPanning=!1}}customElements.define("polygon-workspace",e)}},t={};function n(o){var s=t[o];if(void 0!==s)return s.exports;var r=t[o]={exports:{}};return e[o](r,r.exports,n),r.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";n(119),n(210),n(995),n(941),window.addEventListener("DOMContentLoaded",(()=>{document.body.innerHTML="";const e=document.createElement("polygon-app");document.body.appendChild(e)}));class e extends HTMLElement{constructor(){super(),this.shadow=this.attachShadow({mode:"open"})}static get observedAttributes(){return["title"]}attributeChangedCallback(e,t,n){console.log(`Changing "${e}" from "${t}" to "${n}"`),"title"===e&&this.render()}get title(){return this.getAttribute("title")}set title(e){this.setAttribute("title",e)}connectedCallback(){this.render()}render(){this.shadow.innerHTML=`\n            <style>\n                h1 {\n                    color: red;\n                }\n            </style>\n            <h1>\n                ${this.title}\n            </h1>\n        `}}customElements.define("hello-world",e)})()})();